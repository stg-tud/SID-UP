==== New algorithm ====

Diffusing Computation, running inside a transaction
Node graph is acyclic => it's ok to return all signals at once.
Every Node only returns all it's signals at once => can use regular bag instead of cornet
Returning Signal is either YES or NO (possibly use YES, RETRY, ABORT instead?)
All returned signals of one node are identical:
    - YES only if the node's computation was successful (no lock conflict) and all successors replied YES (commit vote)
    - NO in all other cases (retry vote)
Every node is either a constant (Val, NothingEventStream), a source (Var, EventSource) or a dependent node (all others).
    - every constant has an empty set of source dependencies
    - every source has an id, which is at the same time it's singleton set of source dependencies
    - every dependent node's source dependencies set is the union of all it's dependencies source dependency sets.

==== Other thoughts ====

currently not supported:
    - exception handling
    - garbage collection of parts of the network

0   2   make an ListMergeEventStream that merges multiple concurrently ocurring events into a single event of a list of events
+   3   make an EventStream equivalent of HoldSignal
        -> possibly replace HoldSignal by this eventStream.hold(initialValue)
        -> use for eventstream lifting functions
+   3   lazy evaluation desired, purpose? is that different if exception handling is available? 
++  >>> signal profiling to optimize through lowering or premature propagation of quickly calculated results instead of waiting to see if recalculation is necessary   
+   ??  implement more funny event things
        -> and-event
        -> "not" event??
+   10  implement proper demo application (CRUD??)
+   3   omitting of pointless recalculations, e.g. if the currently unaccessed else part of an if condition changed
        -> requires profiling of previous evaluation, thus requires sequential evaluation.
            -> criteria for good or bad? sounds like it depends on system load?
            -> maybe implement as "if immediate predecessor evaluation happens to be finished, use it's profiling, otherwise just recalculate concurrently"?
0   2   implement exception propagation
0   2   clean up garbage collection prevention of Signal.lastEvent thingy
        -> maybe just use WeakReference?
0   3   allow partial GC of dependency graphs bottom up (discard var's and dependants that aren't referenced anymore and thus won't produce further updates)
0   3   allow partial GC of dependency graphs top down (hold unobserved dependants with weak references so they can be discarded if no outside holds on to them) 
0   2   allow remote var inclusion in transactions
+   10  add communication failure / duplicate tolerance
+   10  bidirectional signals/reactives