currently broken:
    - late signal creation when the system is active
    - exception handling
    - garbage collection of parts of the network

++  8   signal input value caching (crossing events in resource allocation example)
        -> e.g. don't just cache currentValue but all dependency values with it
        -> need to rewrite value discovery in signal closures to go through "this" signal
+   3   lazy evaluation in the presence of exception handling - is it desired, does it have a purpose?
++  >>> signal profiling to optimize through lowering or premature propagation of quickly calculated results instead of waiting to see if recalculation is necessary   
+   ??  implement more funny event things
        -> and-event
        -> "not" event??
+   2   proper solution for source dependencies / late reactive creation
        -> Map[UUID, UUID] to Map[UUID, (UUID, Set[UUID])] of lastEvent and set of early-propagated events per source? 
+   10  implement proper demo application (CRUD??)
0   8   omitting of pointless recalculations, e.g. if the currently unaccessed else part of an if condition changed
-   2   implement exception propagation
0   3   allow partial GC of dependency graphs bottom up (discard var's and dependants that aren't referenced anymore and thus won't produce further updates)
0   3   allow partial GC of dependency graphs top down (hold unobserved dependants with weak references so they can be discarded if no outside holds on to them) 
0   2   allow remote var inclusion in transactions
+   10  communication failure tolerance?
+   15  dependency set changes
+   10  bidirectional signals/reactives